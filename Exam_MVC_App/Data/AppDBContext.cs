// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Exam_MVC_App.Models;
using Microsoft.EntityFrameworkCore;

namespace Exam_MVC_App.Data;

public partial class AppDBContext : DbContext
{
    public AppDBContext(DbContextOptions<AppDBContext> options)
        : base(options)
    {
    }


    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Exam_Question> Exam_Questions { get; set; }

    public virtual DbSet<Instructor_Detial> Instructor_Detials { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Question_Choice> Question_Choices { get; set; }

    public virtual DbSet<Question_Right_Answer> Question_Right_Answers { get; set; }

    public virtual DbSet<Student_Answer> Student_Answers { get; set; }

    public virtual DbSet<Student_Detial> Student_Detials { get; set; }

    public virtual DbSet<Stundent_Course> Stundent_Courses { get; set; }

    public virtual DbSet<Track> Tracks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Branch>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });  
        modelBuilder.Entity<Branch>().HasOne(b=>b.Manager);

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Course_1");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue("Absent");

            entity.HasOne(d => d.Course).WithMany(p => p.Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Course");
        });

        modelBuilder.Entity<Exam_Question>(entity =>
        {
            entity.HasOne(d => d.Exam).WithMany(p => p.Exam_Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Question_Exam");

            entity.HasOne(d => d.Question).WithMany(p => p.Exam_Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Question_Question");
        });

        modelBuilder.Entity<Instructor_Detial>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Instructor_Detials)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Instructor_Detials_Course");

            entity.HasOne(d => d.Track).WithMany(p => p.Instructor_Detials)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Instructor_Detials_Track");

            entity.HasOne(d => d.User).WithMany(p => p.Instructor_Detials)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Instructor_Detials_User");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Question_Course");
        });

        modelBuilder.Entity<Question_Choice>(entity =>
        {
            entity.Property(e => e.Choice_Type).HasDefaultValue("Text");

            entity.HasOne(d => d.Question).WithMany(p => p.Question_Choices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Question_Choices_Question");
        });

        modelBuilder.Entity<Question_Right_Answer>(entity =>
        {
            entity.HasOne(d => d.Question).WithMany(p => p.Question_Right_Answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Question_Right_Answer_Question");
        });

        modelBuilder.Entity<Student_Answer>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_Student_Answer_1");

            entity.HasOne(d => d.Exam_Question).WithMany(p => p.Student_Answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Answer_Exam_Question");

            entity.HasOne(d => d.User).WithMany(p => p.Student_Answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Answer_User");
        });

        modelBuilder.Entity<Student_Detial>(entity =>
        {
            entity.HasOne(d => d.Track).WithMany(p => p.Student_Detials)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Detials_Track");

            entity.HasOne(d => d.User).WithMany(p => p.Student_Detials)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Detials_User");
        });

        modelBuilder.Entity<Stundent_Course>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Stundent_Courses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Stundent_Courses_Course");

            entity.HasOne(d => d.User).WithMany(p => p.Stundent_Courses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Stundent_Courses_User");
        });

        modelBuilder.Entity<Track>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Mng).WithMany(p => p.Tracks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Track_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasOne(d => d.Branch).WithMany(p => p.Users).HasConstraintName("FK_User_Branch");
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}